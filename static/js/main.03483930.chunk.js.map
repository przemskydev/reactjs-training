{"version":3,"sources":["components/Input.js","components/DateComponent.js","components/TaskTodo.js","components/Button.js","components/Buttons.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","handleChange","bind","addTask","e","this","valueChange","target","value","addNewTask","id","type","placeholder","onChange","onClick","React","Component","DateComponent","state","time","hour","timerId","setInterval","updateDate","clearInterval","newDate","newHour","isCompleted","setState","dateStr","toString","hourStr","addedTotal","totalHours","totalMinutes","totalAgo","className","TaskTodo","setTaskDone","removeTask","elementIndex","element","doneTask","remove","title","classComplete","isVisible","visibleCard","Card","Body","Title","variant","Text","Button","formatAtt","showingCards","charAt","toUpperCase","slice","click","Buttons","showCard","index","show","buttonAttr","console","log","list","map","elem","Todo","addTaskToList","handleDone","handleRemove","handleShow","inputValue","newList","Math","random","newValue","el","findIndex","newelement","elIndex","actualList","listAfterRemove","lastArray","currentList","listBeforeRemove","concat","length","filter","item","includes","forEach","item1","item2","push","obj","welcome","inputValues","listOfTasks","key","Container","Row","Col","md","showModal","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03483930.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style/Input.css';\r\n\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.addTask = this.addTask.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.props.valueChange(e.target.value);\r\n  }\r\n\r\n  addTask() {\r\n    this.props.addNewTask()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          id='addInput'\r\n          type='addTask'\r\n          value={this.props.value}\r\n          placeholder='Add task'\r\n          onChange={this.handleChange} />\r\n        <button type='button' onClick={this.addTask} >Add task</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nclass DateComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: 0,\r\n      hour: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerId = setInterval(\r\n      () => this.updateDate(),\r\n      150\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerId);\r\n  }\r\n\r\n  updateDate() {\r\n    let newDate = this.state.time;\r\n    let newHour = this.state.hour;\r\n\r\n    if (!this.props.isCompleted) {\r\n      if (newDate < 59) {\r\n        newDate++;\r\n      } else {\r\n        newHour++;\r\n        newDate = 0\r\n      }\r\n    } else {\r\n      clearInterval(this.timerId);\r\n    }\r\n\r\n    this.setState({\r\n      time: newDate,\r\n      hour: newHour\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    let dateStr = this.state.time.toString();\r\n    let hourStr = this.state.hour.toString();\r\n    const addedTotal = this.props.isCompleted ? 'Total time: ' : 'Added:';\r\n    const totalHours = `${hourStr < 10 ? 0 : ''}${hourStr} hours`;\r\n    const totalMinutes = `${dateStr < 10 ? 0 : ''}${dateStr} min`;\r\n    const totalAgo = `${this.props.isCompleted ? '' : 'ago'}`\r\n\r\n    return (\r\n      <span>\r\n        <small className=\"text-muted\">{addedTotal} {totalHours} {totalMinutes} {totalAgo}</small>\r\n      </span>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DateComponent;","import React from 'react';\r\nimport './style/TaskTodo.css';\r\nimport DateComponent from './DateComponent'\r\n\r\nimport { Button, Card } from 'react-bootstrap';\r\n\r\nclass TaskTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.setTaskDone = this.setTaskDone.bind(this);\r\n    this.removeTask = this.removeTask.bind(this);\r\n\r\n  }\r\n  setTaskDone() {\r\n    const elementIndex = this.props.element.id;\r\n    this.props.doneTask(elementIndex);\r\n  }\r\n\r\n  removeTask() {\r\n    const elementIndex = this.props.element.id;\r\n    this.props.remove(elementIndex)\r\n  }\r\n\r\n  render() {\r\n    const title = <h3>{this.props.element.title}</h3>;\r\n    const isCompleted = this.props.element.isCompleted;\r\n    let classComplete = `${isCompleted ? 'completed' : ''}`\r\n\r\n    const isVisible = this.props.visibleCard;\r\n\r\n    switch(isVisible){\r\n      case 'all':\r\n        classComplete = `${isCompleted ? 'completed' : ''}`\r\n        break;\r\n      case 'active':\r\n        if((isVisible==='active') && (isCompleted===true)){\r\n          classComplete = ' notVisible'\r\n        }\r\n        break;\r\n      case 'completed':\r\n        if((isVisible==='completed') && (isCompleted===false)){\r\n          classComplete = ' notVisible'\r\n        }\r\n        break;\r\n      default:\r\n        classComplete = `${isCompleted ? 'completed' : ''}`\r\n    }\r\n\r\n    return (\r\n        <Card className={classComplete}>\r\n          <Card.Body>\r\n            <Card.Title>{title}</Card.Title>\r\n            <div className='buttons'>\r\n              <Button\r\n                onClick={this.setTaskDone}\r\n                variant=\"outline-success\">Done</Button>\r\n              <Button\r\n                onClick={this.removeTask}\r\n                variant=\"outline-danger\">Delete</Button>\r\n            </div>\r\n          </Card.Body>\r\n          <Card.Text>\r\n            <DateComponent\r\n              isCompleted={isCompleted} />\r\n          </Card.Text>\r\n        </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskTodo;","import React from 'react'\r\n\r\nclass Button extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.formatAtt = this.formatAtt.bind(this)\r\n    this.showingCards = this.showingCards.bind(this)\r\n  }\r\n\r\n  formatAtt(id) {\r\n    if (typeof id !== 'string') return ''\r\n    return id.charAt(0).toUpperCase() + id.slice(1)\r\n  }\r\n\r\n  showingCards(e) {\r\n    this.props.click(e.target.id)\r\n  }\r\n\r\n  render() {\r\n    const id = this.props.id\r\n\r\n    return (\r\n      <button id={id} type='button' onClick={this.showingCards}>{this.formatAtt(id)}</button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './Button';\r\nimport './style/Buttons.css'\r\nimport './style/TaskTodo.css'\r\n\r\n\r\n\r\nclass Buttons extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.removeTask = this.removeTask.bind(this);\r\n    this.showCard = this.showCard.bind(this)\r\n\r\n  }\r\n\r\n  showCard(index) {\r\n    switch (index) {\r\n      case 'all':\r\n        this.props.show({\r\n          buttonAttr: index\r\n        })\r\n        break;\r\n      case 'active':\r\n        this.props.show({\r\n          buttonAttr: index\r\n        })\r\n        break;\r\n      case 'completed':\r\n        this.props.show({\r\n          buttonAttr: index\r\n        })\r\n        break;\r\n      default:\r\n        console.log('PRAY')\r\n    }\r\n  }\r\n\r\n  removeTask() {\r\n    const elementIndex = this.props.list.map(elem => elem.isCompleted ? elem.id : '');\r\n    this.props.remove(elementIndex)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='btnPos'>\r\n        <Button\r\n          id='all'\r\n          click={this.showCard}\r\n        />\r\n        <Button\r\n          id='active'\r\n          click={this.showCard} />\r\n        <Button\r\n          id='completed'\r\n          click={this.showCard}\r\n        />\r\n        <Button\r\n          id='clear'\r\n          click={this.removeTask}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport Input from './Input';\r\nimport TaskTodo from './TaskTodo';\r\nimport Buttons from './Buttons';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nimport './style/Todo.css';\r\n\r\n\r\nclass Todo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.addTaskToList = this.addTaskToList.bind(this);\r\n    this.handleDone = this.handleDone.bind(this);\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.handleShow = this.handleShow.bind(this)\r\n\r\n    this.state = {\r\n      list: [\r\n      ],\r\n      inputValue: '',\r\n      visibleCard: '',\r\n    }\r\n  }\r\n\r\n  addTaskToList() {\r\n    const item = {\r\n      id: Math.random(),\r\n      title: this.state.inputValue,\r\n      isCompleted: false\r\n    };\r\n    const newList = [item, ...this.state.list];\r\n    this.setState({\r\n      list: newList,\r\n    })\r\n    this.setState({\r\n      inputValue: '',\r\n    });\r\n  }\r\n\r\n  handleChange(value) {\r\n    const newValue = value;\r\n    this.setState({\r\n      inputValue: newValue,\r\n    })\r\n  }\r\n\r\n  handleDone(el) {\r\n    const elementIndex = this.state.list.findIndex(elem => elem.id === el)\r\n    const newelement = this.state.list;\r\n    newelement[elementIndex].isCompleted = true;\r\n    this.setState({\r\n      list: newelement\r\n    })\r\n  }\r\n\r\n  handleRemove(elem) {\r\n    const elIndex = this.state.list.findIndex(el => el.id === elem);\r\n    let actualList = [...this.state.list]\r\n    let listAfterRemove = '';\r\n    let lastArray = [];\r\n\r\n    const currentList = this.state.list.map(el => el.id);\r\n    const listBeforeRemove = elem;\r\n\r\n    if (typeof elem === \"number\") {\r\n      actualList = actualList.slice(0, elIndex)\r\n        .concat(actualList.slice(elIndex + 1, actualList.length))\r\n\r\n      this.setState({\r\n        list: actualList\r\n      })\r\n\r\n    } else {\r\n\r\n      listAfterRemove = currentList.filter(item => !listBeforeRemove.includes(item));\r\n      actualList.forEach(item1 => listAfterRemove.forEach(item2 => {\r\n        if (item1.id === item2) {\r\n          lastArray.push(item1)\r\n        }\r\n      }))\r\n\r\n      this.setState({\r\n        list: lastArray\r\n      })\r\n    }\r\n  }\r\n\r\n  handleShow(obj) {\r\n    this.setState({\r\n      visibleCard: obj.buttonAttr\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    const welcome = <h1>Hello there!</h1>;\r\n    const inputValues = this.state.inputValue\r\n\r\n    const listOfTasks = this.state.list.map(el => {\r\n      return (\r\n        <TaskTodo\r\n          key={el.id}\r\n          element={el}\r\n          doneTask={this.handleDone}\r\n          remove={this.handleRemove}\r\n          visibleCard={this.state.visibleCard}\r\n        />\r\n      )\r\n\r\n    });\r\n\r\n    return (\r\n      <Container>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md='10' className=\"text-center height\">\r\n            {welcome}\r\n            <Input\r\n              valueChange={this.handleChange}\r\n              value={inputValues}\r\n              addNewTask={this.addTaskToList}\r\n              showModal={this.showModal}\r\n            />\r\n            <Row>\r\n              {listOfTasks}\r\n            </Row>\r\n            <Buttons\r\n              list={this.state.list}\r\n              remove={this.handleRemove}\r\n              show={this.handleShow} />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Todo;","import React from 'react';\nimport Todo from './components/Todo'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n\n  return (\n    <Todo />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}